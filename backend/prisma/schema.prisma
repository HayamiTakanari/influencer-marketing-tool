generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  INFLUENCER
  ADMIN
}

enum Platform {
  INSTAGRAM
  YOUTUBE
  TIKTOK
  TWITTER
}

enum ProjectStatus {
  PENDING
  MATCHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOT_SPECIFIED
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  role            UserRole
  isVerified      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  client          Client?
  influencer      Influencer?
  teamMembers     TeamMember[]
  sentMessages    Message[]     @relation("sender")
  receivedMessages Message[]    @relation("receiver")
}

model Client {
  id              String    @id @default(cuid())
  userId          String    @unique
  companyName     String
  industry        String?
  contactName     String
  contactPhone    String?
  address         String?
  teamId          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team            Team?     @relation(fields: [teamId], references: [id])
  projects        Project[]
  applications    Application[]
}

model Influencer {
  id              String    @id @default(cuid())
  userId          String    @unique
  displayName     String
  bio             String?
  gender          Gender    @default(NOT_SPECIFIED)
  birthDate       DateTime?
  phoneNumber     String?
  address         String?
  prefecture      String?
  city            String?
  categories      String[]  // 美容、ファッション、グルメなど
  priceMin        Int?      // 最低単価（円）
  priceMax        Int?      // 最高単価（円）
  isRegistered    Boolean   @default(false)
  lastUpdated     DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccounts  SocialAccount[]
  applications    Application[]
  projects        Project[]
  portfolio       Portfolio[]
}

model SocialAccount {
  id              String    @id @default(cuid())
  influencerId    String
  platform        Platform
  username        String
  profileUrl      String
  followerCount   Int       @default(0)
  engagementRate  Float?    // エンゲージメント率（%）
  isVerified      Boolean   @default(false)
  lastSynced      DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  influencer      Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([influencerId, platform])
}

model Team {
  id              String    @id @default(cuid())
  name            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  members         TeamMember[]
  clients         Client[]
}

model TeamMember {
  id              String    @id @default(cuid())
  teamId          String
  userId          String
  isOwner         Boolean   @default(false)
  joinedAt        DateTime  @default(now())

  // Relations
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Project {
  id              String    @id @default(cuid())
  clientId        String
  title           String
  description     String
  category        String
  budget          Int
  targetPlatforms Platform[]
  targetPrefecture String?
  targetCity      String?
  targetGender    Gender?
  targetAgeMin    Int?
  targetAgeMax    Int?
  targetFollowerMin Int?
  targetFollowerMax Int?
  status          ProjectStatus @default(PENDING)
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  client          Client    @relation(fields: [clientId], references: [id])
  applications    Application[]
  matchedInfluencer Influencer? @relation(fields: [matchedInfluencerId], references: [id])
  matchedInfluencerId String?
  messages        Message[]
  transaction     Transaction?
}

model Application {
  id              String    @id @default(cuid())
  projectId       String
  influencerId    String
  clientId        String
  message         String?
  proposedPrice   Int?
  isAccepted      Boolean   @default(false)
  appliedAt       DateTime  @default(now())

  // Relations
  project         Project   @relation(fields: [projectId], references: [id])
  influencer      Influencer @relation(fields: [influencerId], references: [id])
  client          Client    @relation(fields: [clientId], references: [id])

  @@unique([projectId, influencerId])
}

model Message {
  id              String    @id @default(cuid())
  projectId       String
  senderId        String
  receiverId      String
  content         String
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())

  // Relations
  project         Project   @relation(fields: [projectId], references: [id])
  sender          User      @relation("sender", fields: [senderId], references: [id])
  receiver        User      @relation("receiver", fields: [receiverId], references: [id])
}

model Transaction {
  id              String    @id @default(cuid())
  projectId       String    @unique
  amount          Int       // 金額（円）
  fee             Int       // 手数料（円）
  stripePaymentId String    @unique
  status          String    // pending, completed, failed, refunded
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  project         Project   @relation(fields: [projectId], references: [id])
}

model Portfolio {
  id              String    @id @default(cuid())
  influencerId    String
  title           String
  description     String?
  imageUrl        String?
  link            String?
  platform        Platform?
  createdAt       DateTime  @default(now())

  // Relations
  influencer      Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
}