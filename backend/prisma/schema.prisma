generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  INFLUENCER
  ADMIN
}

enum Platform {
  INSTAGRAM
  YOUTUBE
  TIKTOK
  TWITTER
}

enum ProjectStatus {
  PENDING
  MATCHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AchievementPurpose {
  SALES        // 売上目的
  LEAD_GEN     // 集客目的
  AWARENESS    // 認知拡大目的
  BRAND_IMAGE  // ブランドイメージ向上
  ENGAGEMENT   // エンゲージメント向上
}

enum ServiceType {
  PHOTOGRAPHY     // 撮影
  VIDEO_EDITING   // 動画編集
  CONTENT_CREATION // コンテンツ制作
  POSTING         // 投稿
  STORY_CREATION  // ストーリー制作
  CONSULTATION    // コンサルティング
  LIVE_STREAMING  // ライブ配信
  EVENT_APPEARANCE // イベント出演
}

enum InquiryStatus {
  PENDING     // 返答待ち
  ACCEPTED    // 承諾
  DECLINED    // 辞退
  EXPIRED     // 期限切れ
}

enum MilestoneType {
  VIDEO_COMPLETION    // 動画完成
  FINAL_APPROVAL      // 最終承認
  PUBLISH_DATE        // 投稿日
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOT_SPECIFIED
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  role            UserRole
  isVerified      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  client          Client?
  influencer      Influencer?
  teamMembers     TeamMember[]
  sentMessages    Message[]     @relation("sender")
  receivedMessages Message[]    @relation("receiver")
  notifications   Notification[]
  reviewsGiven    Review[]      @relation("ReviewGiven")
  reviewsReceived Review[]      @relation("ReviewReceived")
  securityLogs    SecurityLog[]
}

model Client {
  id              String    @id @default(cuid())
  userId          String    @unique
  companyName     String
  industry        String?
  contactName     String
  contactPhone    String?
  address         String?
  teamId          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team            Team?     @relation(fields: [teamId], references: [id])
  projects        Project[]
  applications    Application[]
  reviews         Review[]
  bulkInquiries   BulkInquiry[]
}

model Influencer {
  id              String    @id @default(cuid())
  userId          String    @unique
  displayName     String
  bio             String?
  gender          Gender    @default(NOT_SPECIFIED)
  birthDate       DateTime?
  phoneNumber     String?
  address         String?
  prefecture      String?
  city            String?
  categories      String[]  // 美容、ファッション、グルメなど
  priceMin        Int?      // 最低単価（円）
  priceMax        Int?      // 最高単価（円）
  isRegistered    Boolean   @default(false)
  lastUpdated     DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccounts  SocialAccount[]
  applications    Application[]
  projects        Project[]
  portfolio       Portfolio[]
  reviews         Review[]
  achievements    Achievement[]
  servicePricing  ServicePricing[]
  inquiryResponses InquiryResponse[]
}

model SocialAccount {
  id              String    @id @default(cuid())
  influencerId    String
  platform        Platform
  username        String
  profileUrl      String
  followerCount   Int       @default(0)
  engagementRate  Float?    // エンゲージメント率（%）
  isVerified      Boolean   @default(false)
  lastSynced      DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  influencer      Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([influencerId, platform])
}

model Team {
  id              String    @id @default(cuid())
  name            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  members         TeamMember[]
  clients         Client[]
}

model TeamMember {
  id              String    @id @default(cuid())
  teamId          String
  userId          String
  isOwner         Boolean   @default(false)
  joinedAt        DateTime  @default(now())

  // Relations
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Project {
  id              String    @id @default(cuid())
  clientId        String
  title           String
  description     String
  category        String
  budget          Int
  targetPlatforms Platform[]
  targetPrefecture String?
  targetCity      String?
  targetGender    Gender?
  targetAgeMin    Int?
  targetAgeMax    Int?
  targetFollowerMin Int?
  targetFollowerMax Int?
  status          ProjectStatus @default(PENDING)
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  client          Client    @relation(fields: [clientId], references: [id])
  applications    Application[]
  matchedInfluencer Influencer? @relation(fields: [matchedInfluencerId], references: [id])
  matchedInfluencerId String?
  messages        Message[]
  transaction     Transaction?
  reviews         Review[]
  schedule        ProjectSchedule?
}

model Application {
  id              String    @id @default(cuid())
  projectId       String
  influencerId    String
  clientId        String
  message         String?
  proposedPrice   Int?
  isAccepted      Boolean   @default(false)
  appliedAt       DateTime  @default(now())

  // Relations
  project         Project   @relation(fields: [projectId], references: [id])
  influencer      Influencer @relation(fields: [influencerId], references: [id])
  client          Client    @relation(fields: [clientId], references: [id])

  @@unique([projectId, influencerId])
}

model Message {
  id              String    @id @default(cuid())
  projectId       String
  senderId        String
  receiverId      String
  content         String
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())

  // Relations
  project         Project   @relation(fields: [projectId], references: [id])
  sender          User      @relation("sender", fields: [senderId], references: [id])
  receiver        User      @relation("receiver", fields: [receiverId], references: [id])
}

model Transaction {
  id              String    @id @default(cuid())
  projectId       String    @unique
  amount          Int       // 金額（円）
  fee             Int       // 手数料（円）
  stripePaymentId String    @unique
  status          String    // pending, completed, failed, refunded
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  project         Project   @relation(fields: [projectId], references: [id])
}

model Portfolio {
  id              String    @id @default(cuid())
  influencerId    String
  title           String
  description     String?
  imageUrl        String?
  link            String?
  platform        Platform?
  createdAt       DateTime  @default(now())

  // Relations
  influencer      Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  APPLICATION_RECEIVED
  APPLICATION_ACCEPTED
  APPLICATION_REJECTED
  PROJECT_MATCHED
  MESSAGE_RECEIVED
  PAYMENT_COMPLETED
  PROJECT_STATUS_CHANGED
  TEAM_INVITATION
  SYSTEM_ANNOUNCEMENT
}

model Notification {
  id              String    @id @default(cuid())
  userId          String
  type            NotificationType
  title           String
  message         String
  isRead          Boolean   @default(false)
  data            Json?     // Additional data for the notification
  createdAt       DateTime  @default(now())
  readAt          DateTime?

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
}

model Review {
  id              String    @id @default(cuid())
  projectId       String
  reviewerId      String    // User who gives the review
  revieweeId      String    // User being reviewed (influencer or client)
  influencerId    String?   // If reviewing influencer
  clientId        String?   // If reviewing client
  rating          Int       // 1-5 stars
  comment         String?
  isPublic        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reviewer        User      @relation("ReviewGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee        User      @relation("ReviewReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  influencer      Influencer? @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  client          Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([projectId, reviewerId]) // One review per project per reviewer
  @@index([revieweeId, rating])
  @@index([influencerId, rating])
  @@index([clientId, rating])
}

// v3.0 新機能: インフルエンサー実績管理
model Achievement {
  id              String    @id @default(cuid())
  influencerId    String
  projectName     String
  brandName       String
  purpose         AchievementPurpose
  platform        Platform
  description     String?
  metrics         Json?     // 成果指標: {views: 1000, likes: 100, shares: 50, conversions: 5}
  budget          Int?      // 予算
  duration        String?   // 実施期間
  imageUrl        String?   // 実績画像
  link            String?   // 実績URL
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  influencer      Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@index([influencerId, purpose])
  @@index([platform, purpose])
}

// v3.0 新機能: インフルエンサー料金体系
model ServicePricing {
  id              String    @id @default(cuid())
  influencerId    String
  serviceType     ServiceType
  price           Int       // 料金（円）
  unit            String    @default("per_post") // 単位: per_post, per_hour, per_day
  description     String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  influencer      Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([influencerId, serviceType])
  @@index([influencerId, isActive])
}

// v3.0 新機能: 一斉問い合わせ
model BulkInquiry {
  id              String    @id @default(cuid())
  clientId        String
  title           String
  description     String
  budget          Int?
  deadline        DateTime?
  requiredServices ServiceType[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  client          Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  responses       InquiryResponse[]

  @@index([clientId, createdAt])
}

// v3.0 新機能: 問い合わせ回答
model InquiryResponse {
  id              String    @id @default(cuid())
  inquiryId       String
  influencerId    String
  status          InquiryStatus @default(PENDING)
  proposedPrice   Int?
  message         String?
  availableFrom   DateTime?
  availableTo     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  inquiry         BulkInquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  influencer      Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([inquiryId, influencerId])
  @@index([inquiryId, status])
  @@index([influencerId, status])
}

// v3.0 新機能: スケジュール管理
model ProjectSchedule {
  id              String    @id @default(cuid())
  projectId       String    @unique
  publishDate     DateTime  // 投稿日
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestones      Milestone[]

  @@index([publishDate])
}

// v3.0 新機能: マイルストーン管理
model Milestone {
  id              String    @id @default(cuid())
  scheduleId      String
  type            MilestoneType
  title           String
  description     String?
  dueDate         DateTime
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  notificationSent Boolean  @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  schedule        ProjectSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId, dueDate])
  @@index([dueDate, isCompleted])
  @@index([dueDate, notificationSent])
}

// セキュリティログ管理
enum SecurityEventType {
  XSS_ATTACK
  SQL_INJECTION
  COMMAND_INJECTION
  CSRF_ATTACK
  BRUTE_FORCE
  SUSPICIOUS_ACTIVITY
  CSP_VIOLATION
  AUTHENTICATION_FAILURE
  AUTHORIZATION_FAILURE
  DATA_BREACH_ATTEMPT
  MALWARE_UPLOAD
  RATE_LIMIT_EXCEEDED
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SecurityStatus {
  DETECTED
  INVESTIGATING
  RESOLVED
  FALSE_POSITIVE
  IGNORED
}

// セキュリティインシデントログ
model SecurityLog {
  id              String          @id @default(cuid())
  eventType       SecurityEventType
  severity        SecuritySeverity
  status          SecurityStatus  @default(DETECTED)
  
  // 攻撃者情報
  ipAddress       String
  userAgent       String?
  userId          String?
  sessionId       String?
  
  // リクエスト情報
  url             String
  method          String          @default("GET")
  headers         Json?
  payload         String?         // 攻撃ペイロード（部分的）
  
  // 検出情報
  detectionEngine String          @default("XSS_ENGINE")
  confidence      Int             @default(0) // 0-100
  riskScore       Int             @default(0) // 0-100
  detectedPatterns Json?          // 検出されたパターン
  
  // 地理的情報
  country         String?
  region          String?
  city            String?
  
  // タイムスタンプ
  detectedAt      DateTime        @default(now())
  resolvedAt      DateTime?
  updatedAt       DateTime        @updatedAt
  
  // 関連情報
  incidentId      String?         // 関連インシデントID
  parentLogId     String?         // 親ログID（関連攻撃）
  
  // アクション
  actionTaken     String?         // 実行されたアクション
  blocked         Boolean         @default(false)
  notified        Boolean         @default(false)
  
  // メタデータ
  metadata        Json?           // 追加情報
  notes           String?         // 管理者メモ
  
  // Relations
  user            User?           @relation(fields: [userId], references: [id])
  parentLog       SecurityLog?    @relation("SecurityLogHierarchy", fields: [parentLogId], references: [id])
  childLogs       SecurityLog[]   @relation("SecurityLogHierarchy")
  
  @@index([eventType, detectedAt])
  @@index([severity, detectedAt])
  @@index([ipAddress, detectedAt])
  @@index([userId, detectedAt])
  @@index([status, detectedAt])
  @@index([incidentId])
  @@index([detectedAt])
}

// セキュリティ統計情報（日次集計）
model SecurityStats {
  id              String          @id @default(cuid())
  date            DateTime        @unique @db.Date
  
  // 攻撃統計
  totalAttacks    Int             @default(0)
  xssAttacks      Int             @default(0)
  sqlInjections   Int             @default(0)
  bruteForce      Int             @default(0)
  otherAttacks    Int             @default(0)
  
  // 重要度別統計
  criticalEvents  Int             @default(0)
  highEvents      Int             @default(0)
  mediumEvents    Int             @default(0)
  lowEvents       Int             @default(0)
  
  // 地理的統計
  topCountries    Json?           // 攻撃元上位国
  topRegions      Json?           // 攻撃元上位地域
  
  // IP統計
  uniqueIPs       Int             @default(0)
  blockedIPs      Int             @default(0)
  topAttackerIPs  Json?           // 上位攻撃者IP
  
  // ユーザー統計
  affectedUsers   Int             @default(0)
  suspiciousUsers Json?           // 疑わしいユーザー
  
  // システム統計
  avgResponseTime Float?          // 平均検出時間
  falsePositives  Int             @default(0)
  resolvedIncidents Int           @default(0)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([date])
}

// IPアドレスブラックリスト
model IPBlacklist {
  id              String          @id @default(cuid())
  ipAddress       String          @unique
  cidr            String?         // CIDR notation for IP ranges
  
  // ブロック理由
  reason          String
  severity        SecuritySeverity
  firstDetected   DateTime
  lastActivity    DateTime
  
  // 統計情報
  attackCount     Int             @default(1)
  blockedRequests Int             @default(0)
  
  // ブロック設定
  isActive        Boolean         @default(true)
  expiresAt       DateTime?       // 自動解除日時
  permanent       Boolean         @default(false)
  
  // 地理的情報
  country         String?
  region          String?
  asn             String?         // Autonomous System Number
  isp             String?
  
  // 管理情報
  addedBy         String?         // 追加した管理者ID
  notes           String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([ipAddress])
  @@index([isActive, expiresAt])
  @@index([country])
  @@index([lastActivity])
}

// セキュリティルール管理
model SecurityRule {
  id              String          @id @default(cuid())
  name            String          @unique
  description     String?
  
  // ルール定義
  ruleType        SecurityEventType
  pattern         String          // 検出パターン (正規表現等)
  severity        SecuritySeverity
  confidence      Int             @default(50) // 0-100
  
  // ルール設定
  isActive        Boolean         @default(true)
  autoBlock       Boolean         @default(false)
  autoNotify      Boolean         @default(true)
  
  // 統計情報
  matchCount      Int             @default(0)
  falsePositives  Int             @default(0)
  lastMatched     DateTime?
  
  // 管理情報
  createdBy       String?         // 作成者ID
  version         Int             @default(1)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([ruleType, isActive])
  @@index([isActive, severity])
}

