"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "src_services_api_ts";
exports.ids = ["src_services_api_ts"];
exports.modules = {

/***/ "./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceptApplication: () => (/* binding */ acceptApplication),\n/* harmony export */   addPortfolio: () => (/* binding */ addPortfolio),\n/* harmony export */   addSocialAccount: () => (/* binding */ addSocialAccount),\n/* harmony export */   addTeamMember: () => (/* binding */ addTeamMember),\n/* harmony export */   applyToProject: () => (/* binding */ applyToProject),\n/* harmony export */   completeRegistration: () => (/* binding */ completeRegistration),\n/* harmony export */   confirmPayment: () => (/* binding */ confirmPayment),\n/* harmony export */   createPaymentIntent: () => (/* binding */ createPaymentIntent),\n/* harmony export */   createProject: () => (/* binding */ createProject),\n/* harmony export */   createReview: () => (/* binding */ createReview),\n/* harmony export */   createSystemAnnouncement: () => (/* binding */ createSystemAnnouncement),\n/* harmony export */   createTeam: () => (/* binding */ createTeam),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   deleteNotification: () => (/* binding */ deleteNotification),\n/* harmony export */   deletePortfolio: () => (/* binding */ deletePortfolio),\n/* harmony export */   deleteProject: () => (/* binding */ deleteProject),\n/* harmony export */   deleteReview: () => (/* binding */ deleteReview),\n/* harmony export */   deleteSocialAccount: () => (/* binding */ deleteSocialAccount),\n/* harmony export */   deleteTeam: () => (/* binding */ deleteTeam),\n/* harmony export */   getApplicationsForMyProjects: () => (/* binding */ getApplicationsForMyProjects),\n/* harmony export */   getAvailableProjects: () => (/* binding */ getAvailableProjects),\n/* harmony export */   getCategories: () => (/* binding */ getCategories),\n/* harmony export */   getChatList: () => (/* binding */ getChatList),\n/* harmony export */   getComparisonData: () => (/* binding */ getComparisonData),\n/* harmony export */   getInfluencerById: () => (/* binding */ getInfluencerById),\n/* harmony export */   getInfluencerStats: () => (/* binding */ getInfluencerStats),\n/* harmony export */   getMessages: () => (/* binding */ getMessages),\n/* harmony export */   getMyApplications: () => (/* binding */ getMyApplications),\n/* harmony export */   getMyProfile: () => (/* binding */ getMyProfile),\n/* harmony export */   getMyProjects: () => (/* binding */ getMyProjects),\n/* harmony export */   getMyReviews: () => (/* binding */ getMyReviews),\n/* harmony export */   getMyTeam: () => (/* binding */ getMyTeam),\n/* harmony export */   getNotifications: () => (/* binding */ getNotifications),\n/* harmony export */   getOverviewStats: () => (/* binding */ getOverviewStats),\n/* harmony export */   getPaymentHistory: () => (/* binding */ getPaymentHistory),\n/* harmony export */   getPaymentStats: () => (/* binding */ getPaymentStats),\n/* harmony export */   getPerformanceMetrics: () => (/* binding */ getPerformanceMetrics),\n/* harmony export */   getPrefectures: () => (/* binding */ getPrefectures),\n/* harmony export */   getProjectById: () => (/* binding */ getProjectById),\n/* harmony export */   getProjectCategories: () => (/* binding */ getProjectCategories),\n/* harmony export */   getRatingStats: () => (/* binding */ getRatingStats),\n/* harmony export */   getReviewableProjects: () => (/* binding */ getReviewableProjects),\n/* harmony export */   getReviewsForUser: () => (/* binding */ getReviewsForUser),\n/* harmony export */   getSyncStatus: () => (/* binding */ getSyncStatus),\n/* harmony export */   getUnreadCount: () => (/* binding */ getUnreadCount),\n/* harmony export */   getUnreadNotificationCount: () => (/* binding */ getUnreadNotificationCount),\n/* harmony export */   login: () => (/* binding */ login),\n/* harmony export */   markAllNotificationsAsRead: () => (/* binding */ markAllNotificationsAsRead),\n/* harmony export */   markMessagesAsRead: () => (/* binding */ markMessagesAsRead),\n/* harmony export */   markNotificationAsRead: () => (/* binding */ markNotificationAsRead),\n/* harmony export */   refundPayment: () => (/* binding */ refundPayment),\n/* harmony export */   register: () => (/* binding */ register),\n/* harmony export */   rejectApplication: () => (/* binding */ rejectApplication),\n/* harmony export */   removeTeamMember: () => (/* binding */ removeTeamMember),\n/* harmony export */   searchInfluencers: () => (/* binding */ searchInfluencers),\n/* harmony export */   sendMessage: () => (/* binding */ sendMessage),\n/* harmony export */   syncAllMyAccounts: () => (/* binding */ syncAllMyAccounts),\n/* harmony export */   syncSocialAccount: () => (/* binding */ syncSocialAccount),\n/* harmony export */   updateMemberRole: () => (/* binding */ updateMemberRole),\n/* harmony export */   updatePortfolio: () => (/* binding */ updatePortfolio),\n/* harmony export */   updateProfile: () => (/* binding */ updateProfile),\n/* harmony export */   updateProject: () => (/* binding */ updateProject),\n/* harmony export */   updateProjectStatus: () => (/* binding */ updateProjectStatus),\n/* harmony export */   updateReview: () => (/* binding */ updateReview),\n/* harmony export */   updateSocialAccount: () => (/* binding */ updateSocialAccount),\n/* harmony export */   updateTeam: () => (/* binding */ updateTeam),\n/* harmony export */   uploadPortfolioImage: () => (/* binding */ uploadPortfolioImage)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Determine the API base URL based on environment\nconst getApiBaseUrl = ()=>{\n    // If explicitly set via environment variable, use that\n    if (true) {\n        return \"http://localhost:5002/api\";\n    }\n    // Check if we're in a browser environment\n    if (false) {}\n    // Default to localhost for development\n    return \"http://localhost:5002/api\";\n};\nconst API_BASE_URL = getApiBaseUrl();\nconsole.log(\"API_BASE_URL:\", API_BASE_URL);\nconsole.log(\"process.env.NEXT_PUBLIC_API_URL:\", \"http://localhost:5002/api\");\nconsole.log(\"Window hostname:\",  false ? 0 : \"SSR\");\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\napi.interceptors.request.use((config)=>{\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n});\n// Auth\nconst login = async (email, password)=>{\n    console.log(\"Login API called with:\", {\n        email,\n        baseURL: API_BASE_URL\n    });\n    // Check if we're in Vercel production environment\n    if (false) {}\n    try {\n        const response = await api.post(\"/auth/login\", {\n            email,\n            password\n        });\n        console.log(\"Login successful:\", response.data);\n        return response.data;\n    } catch (error) {\n        console.error(\"Login error:\", error);\n        throw error;\n    }\n};\nconst register = async (userData)=>{\n    const response = await api.post(\"/auth/register\", userData);\n    return response.data;\n};\n// Influencer Search\nconst searchInfluencers = async (filters)=>{\n    const response = await api.get(\"/influencers/search\", {\n        params: filters\n    });\n    return response.data;\n};\nconst getInfluencerById = async (id)=>{\n    const response = await api.get(`/influencers/${id}`);\n    return response.data;\n};\nconst getInfluencerStats = async (id)=>{\n    const response = await api.get(`/influencers/${id}/stats`);\n    return response.data;\n};\nconst getCategories = async ()=>{\n    const response = await api.get(\"/influencers/categories\");\n    return response.data;\n};\nconst getPrefectures = async ()=>{\n    const response = await api.get(\"/influencers/prefectures\");\n    return response.data;\n};\n// Profile Management\nconst getMyProfile = async ()=>{\n    const response = await api.get(\"/profile/me\");\n    return response.data;\n};\nconst updateProfile = async (data)=>{\n    const response = await api.put(\"/profile/me\", data);\n    return response.data;\n};\nconst completeRegistration = async ()=>{\n    const response = await api.post(\"/profile/me/complete-registration\");\n    return response.data;\n};\n// Social Accounts\nconst addSocialAccount = async (data)=>{\n    const response = await api.post(\"/profile/social-accounts\", data);\n    return response.data;\n};\nconst updateSocialAccount = async (id, data)=>{\n    const response = await api.put(`/profile/social-accounts/${id}`, data);\n    return response.data;\n};\nconst deleteSocialAccount = async (id)=>{\n    const response = await api.delete(`/profile/social-accounts/${id}`);\n    return response.data;\n};\n// Portfolio\nconst addPortfolio = async (data)=>{\n    const response = await api.post(\"/profile/portfolio\", data);\n    return response.data;\n};\nconst updatePortfolio = async (id, data)=>{\n    const response = await api.put(`/profile/portfolio/${id}`, data);\n    return response.data;\n};\nconst deletePortfolio = async (id)=>{\n    const response = await api.delete(`/profile/portfolio/${id}`);\n    return response.data;\n};\nconst uploadPortfolioImage = async (portfolioId, file)=>{\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    const response = await api.post(`/profile/portfolio/${portfolioId}/image`, formData, {\n        headers: {\n            \"Content-Type\": \"multipart/form-data\"\n        }\n    });\n    return response.data;\n};\n// Chat\nconst getChatList = async ()=>{\n    const response = await api.get(\"/chat/chats\");\n    return response.data;\n};\nconst getMessages = async (projectId, page = 1, limit = 50)=>{\n    const response = await api.get(`/chat/messages/${projectId}`, {\n        params: {\n            page,\n            limit\n        }\n    });\n    return response.data;\n};\nconst sendMessage = async (projectId, content)=>{\n    const response = await api.post(\"/chat/messages\", {\n        projectId,\n        content\n    });\n    return response.data;\n};\nconst markMessagesAsRead = async (projectId)=>{\n    const response = await api.put(`/chat/messages/${projectId}/read`);\n    return response.data;\n};\nconst getUnreadCount = async ()=>{\n    const response = await api.get(\"/chat/unread-count\");\n    return response.data;\n};\n// Payments\nconst createPaymentIntent = async (data)=>{\n    const response = await api.post(\"/payments/create-payment-intent\", data);\n    return response.data;\n};\nconst confirmPayment = async (data)=>{\n    const response = await api.post(\"/payments/confirm-payment\", data);\n    return response.data;\n};\nconst getPaymentHistory = async ()=>{\n    const response = await api.get(\"/payments/history\");\n    return response.data;\n};\nconst refundPayment = async (transactionId)=>{\n    const response = await api.post(`/payments/refund/${transactionId}`);\n    return response.data;\n};\nconst getPaymentStats = async ()=>{\n    const response = await api.get(\"/payments/stats\");\n    return response.data;\n};\n// SNS\nconst syncSocialAccount = async (socialAccountId)=>{\n    const response = await api.post(`/sns/sync/${socialAccountId}`);\n    return response.data;\n};\nconst syncAllMyAccounts = async ()=>{\n    const response = await api.post(\"/sns/sync-all\");\n    return response.data;\n};\nconst getSyncStatus = async ()=>{\n    const response = await api.get(\"/sns/sync-status\");\n    return response.data;\n};\n// Projects\nconst getAvailableProjects = async (filters = {})=>{\n    const response = await api.get(\"/projects/available\", {\n        params: filters\n    });\n    return response.data;\n};\nconst applyToProject = async (data)=>{\n    const response = await api.post(\"/projects/apply\", data);\n    return response.data;\n};\nconst getMyApplications = async ()=>{\n    const response = await api.get(\"/projects/my-applications\");\n    return response.data;\n};\nconst getApplicationsForMyProjects = async ()=>{\n    const response = await api.get(\"/projects/applications\");\n    return response.data;\n};\nconst acceptApplication = async (applicationId)=>{\n    const response = await api.put(`/projects/applications/${applicationId}/accept`);\n    return response.data;\n};\nconst rejectApplication = async (applicationId)=>{\n    const response = await api.delete(`/projects/applications/${applicationId}/reject`);\n    return response.data;\n};\nconst getProjectCategories = async ()=>{\n    const response = await api.get(\"/projects/categories\");\n    return response.data;\n};\n// Project CRUD operations\nconst createProject = async (data)=>{\n    // Mock response for Vercel environment\n    if (false) {}\n    const response = await api.post(\"/projects\", data);\n    return response.data;\n};\nconst getMyProjects = async ()=>{\n    // Mock response for Vercel environment\n    if (false) {}\n    const response = await api.get(\"/projects\");\n    return response.data;\n};\nconst getProjectById = async (projectId)=>{\n    // Mock response for Vercel environment\n    if (false) {}\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n};\nconst updateProject = async (projectId, data)=>{\n    const response = await api.put(`/projects/${projectId}`, data);\n    return response.data;\n};\nconst updateProjectStatus = async (projectId, status)=>{\n    const response = await api.put(`/projects/${projectId}/status`, {\n        status\n    });\n    return response.data;\n};\nconst deleteProject = async (projectId)=>{\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n};\n// Teams\nconst createTeam = async (data)=>{\n    const response = await api.post(\"/teams\", data);\n    return response.data;\n};\nconst getMyTeam = async ()=>{\n    const response = await api.get(\"/teams/my-team\");\n    return response.data;\n};\nconst updateTeam = async (teamId, data)=>{\n    const response = await api.put(`/teams/${teamId}`, data);\n    return response.data;\n};\nconst addTeamMember = async (teamId, data)=>{\n    const response = await api.post(`/teams/${teamId}/members`, data);\n    return response.data;\n};\nconst removeTeamMember = async (teamId, memberId)=>{\n    const response = await api.delete(`/teams/${teamId}/members/${memberId}`);\n    return response.data;\n};\nconst updateMemberRole = async (teamId, memberId, data)=>{\n    const response = await api.put(`/teams/${teamId}/members/${memberId}/role`, data);\n    return response.data;\n};\nconst deleteTeam = async (teamId)=>{\n    const response = await api.delete(`/teams/${teamId}`);\n    return response.data;\n};\n// Notifications\nconst getNotifications = async (page = 1, limit = 20, unreadOnly = false)=>{\n    const response = await api.get(\"/notifications\", {\n        params: {\n            page,\n            limit,\n            unreadOnly\n        }\n    });\n    return response.data;\n};\nconst getUnreadNotificationCount = async ()=>{\n    const response = await api.get(\"/notifications/unread-count\");\n    return response.data;\n};\nconst markNotificationAsRead = async (notificationId)=>{\n    const response = await api.put(`/notifications/${notificationId}/read`);\n    return response.data;\n};\nconst markAllNotificationsAsRead = async ()=>{\n    const response = await api.put(\"/notifications/mark-all-read\");\n    return response.data;\n};\nconst deleteNotification = async (notificationId)=>{\n    const response = await api.delete(`/notifications/${notificationId}`);\n    return response.data;\n};\nconst createSystemAnnouncement = async (data)=>{\n    const response = await api.post(\"/notifications/system-announcement\", data);\n    return response.data;\n};\n// Analytics\nconst getOverviewStats = async (period = \"month\", startDate, endDate)=>{\n    const params = {\n        period\n    };\n    if (startDate) params.startDate = startDate;\n    if (endDate) params.endDate = endDate;\n    const response = await api.get(\"/analytics/overview\", {\n        params\n    });\n    return response.data;\n};\nconst getPerformanceMetrics = async ()=>{\n    const response = await api.get(\"/analytics/performance\");\n    return response.data;\n};\nconst getComparisonData = async ()=>{\n    const response = await api.get(\"/analytics/comparison\");\n    return response.data;\n};\n// Reviews\nconst createReview = async (data)=>{\n    const response = await api.post(\"/reviews\", data);\n    return response.data;\n};\nconst getReviewsForUser = async (userId, page = 1, limit = 20, rating)=>{\n    const params = {\n        page,\n        limit\n    };\n    if (rating) params.rating = rating;\n    const response = await api.get(`/reviews/user/${userId}`, {\n        params\n    });\n    return response.data;\n};\nconst getMyReviews = async (type = \"received\", page = 1, limit = 20)=>{\n    const response = await api.get(\"/reviews/my-reviews\", {\n        params: {\n            type,\n            page,\n            limit\n        }\n    });\n    return response.data;\n};\nconst getReviewableProjects = async ()=>{\n    const response = await api.get(\"/reviews/reviewable-projects\");\n    return response.data;\n};\nconst updateReview = async (reviewId, data)=>{\n    const response = await api.put(`/reviews/${reviewId}`, data);\n    return response.data;\n};\nconst deleteReview = async (reviewId)=>{\n    const response = await api.delete(`/reviews/${reviewId}`);\n    return response.data;\n};\nconst getRatingStats = async (userId)=>{\n    const response = await api.get(`/reviews/user/${userId}/stats`);\n    return response.data;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (api);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/api.ts\n");

/***/ })

};
;