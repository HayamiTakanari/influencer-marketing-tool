"use strict";exports.id=279,exports.ids=[279],exports.modules={4279:(a,t,e)=>{e.a(a,async(a,o)=>{try{e.d(t,{acceptApplication:()=>R,addPortfolio:()=>j,addSocialAccount:()=>g,addTeamMember:()=>U,applyToProject:()=>P,createProject:()=>I,createReview:()=>W,createTeam:()=>S,deleteNotification:()=>q,deletePortfolio:()=>v,deleteSocialAccount:()=>f,deleteTeam:()=>x,getApplicationsForMyProjects:()=>b,getAvailableProjects:()=>$,getComparisonData:()=>O,getInfluencerById:()=>y,getMyApplications:()=>A,getMyProfile:()=>w,getMyProjects:()=>T,getMyReviews:()=>X,getMyTeam:()=>B,getNotifications:()=>C,getOverviewStats:()=>z,getPerformanceMetrics:()=>F,getProjectById:()=>L,getReviewableProjects:()=>G,ij:()=>d,login:()=>n,markAllNotificationsAsRead:()=>E,markNotificationAsRead:()=>D,register:()=>l,rejectApplication:()=>M,removeTeamMember:()=>_,searchInfluencers:()=>p,updateMemberRole:()=>k,updatePortfolio:()=>h,updateProfile:()=>m,updateSocialAccount:()=>u,updateTeam:()=>N});var s=e(9648),i=a([s]);s=(i.then?(await i)():i)[0];let c="http://localhost:5002/api";console.log("API_BASE_URL:",c),console.log("process.env.NEXT_PUBLIC_API_URL:","http://localhost:5002/api"),console.log("Window hostname:","SSR");let r=s.default.create({baseURL:c,headers:{"Content-Type":"application/json"}});r.interceptors.request.use(a=>{let t=localStorage.getItem("token");return t&&(a.headers.Authorization=`Bearer ${t}`),a});let n=async(a,t)=>{console.log("Login API called with:",{email:a,baseURL:c});try{let e=await r.post("/auth/login",{email:a,password:t});return console.log("Login successful:",e.data),e.data}catch(a){throw console.error("Login error:",a),a}},l=async a=>(await r.post("/auth/register",a)).data,p=async a=>(await r.get("/influencers/search",{params:a})).data,d=async a=>(await r.post("/ai/recommend-influencers",a)).data,y=async a=>(await r.get(`/influencers/${a}`)).data,w=async()=>(await r.get("/profile/me")).data,m=async a=>(await r.put("/profile/me",a)).data,g=async a=>(await r.post("/profile/social-accounts",a)).data,u=async(a,t)=>(await r.put(`/profile/social-accounts/${a}`,t)).data,f=async a=>(await r.delete(`/profile/social-accounts/${a}`)).data,j=async a=>(await r.post("/profile/portfolio",a)).data,h=async(a,t)=>(await r.put(`/profile/portfolio/${a}`,t)).data,v=async a=>(await r.delete(`/profile/portfolio/${a}`)).data,$=async(a={})=>(await r.get("/projects/available",{params:a})).data,P=async a=>(await r.post("/projects/apply",a)).data,A=async()=>(await r.get("/projects/my-applications")).data,b=async()=>(await r.get("/applications/my-projects")).data,R=async a=>(await r.put(`/projects/applications/${a}/accept`)).data,M=async a=>(await r.delete(`/projects/applications/${a}/reject`)).data,I=async a=>(await r.post("/projects",a)).data,T=async()=>(await r.get("/projects")).data,L=async a=>(await r.get(`/projects/${a}`)).data,S=async a=>(await r.post("/teams",a)).data,B=async()=>(await r.get("/teams/my-team")).data,N=async(a,t)=>(await r.put(`/teams/${a}`,t)).data,U=async(a,t)=>(await r.post(`/teams/${a}/members`,t)).data,_=async(a,t)=>(await r.delete(`/teams/${a}/members/${t}`)).data,k=async(a,t,e)=>(await r.put(`/teams/${a}/members/${t}/role`,e)).data,x=async a=>(await r.delete(`/teams/${a}`)).data,C=async(a=1,t=20,e=!1)=>(await r.get("/notifications",{params:{page:a,limit:t,unreadOnly:e}})).data,D=async a=>(await r.put(`/notifications/${a}/read`)).data,E=async()=>(await r.put("/notifications/mark-all-read")).data,q=async a=>(await r.delete(`/notifications/${a}`)).data,z=async(a="month",t,e)=>{let o={period:a};return t&&(o.startDate=t),e&&(o.endDate=e),(await r.get("/analytics/overview",{params:o})).data},F=async(a="month")=>(await r.get("/analytics/performance")).data,O=async(a="month")=>(await r.get("/analytics/comparison")).data,W=async a=>(await r.post("/reviews",a)).data,X=async(a="received",t=1,e=20)=>(await r.get("/reviews/my-reviews",{params:{type:a,page:t,limit:e}})).data,G=async()=>(await r.get("/reviews/reviewable-projects")).data;o()}catch(a){o(a)}})}};