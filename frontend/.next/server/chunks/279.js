"use strict";exports.id=279,exports.ids=[279],exports.modules={4279:(a,t,e)=>{e.a(a,async(a,o)=>{try{e.d(t,{acceptApplication:()=>b,addPortfolio:()=>f,addSocialAccount:()=>m,addTeamMember:()=>N,applyToProject:()=>$,createProject:()=>M,createReview:()=>O,createTeam:()=>L,deleteNotification:()=>E,deletePortfolio:()=>j,deleteSocialAccount:()=>u,deleteTeam:()=>k,getApplicationsForMyProjects:()=>A,getAvailableProjects:()=>v,getComparisonData:()=>F,getInfluencerById:()=>d,getMyApplications:()=>P,getMyProfile:()=>y,getMyProjects:()=>I,getMyReviews:()=>W,getMyTeam:()=>S,getNotifications:()=>x,getOverviewStats:()=>q,getPerformanceMetrics:()=>z,getProjectById:()=>T,getReviewableProjects:()=>X,login:()=>n,markAllNotificationsAsRead:()=>D,markNotificationAsRead:()=>C,register:()=>l,rejectApplication:()=>R,removeTeamMember:()=>U,searchInfluencers:()=>p,updateMemberRole:()=>_,updatePortfolio:()=>h,updateProfile:()=>w,updateSocialAccount:()=>g,updateTeam:()=>B});var s=e(9648),i=a([s]);s=(i.then?(await i)():i)[0];let c="http://localhost:5002/api";console.log("API_BASE_URL:",c),console.log("process.env.NEXT_PUBLIC_API_URL:","http://localhost:5002/api"),console.log("Window hostname:","SSR");let r=s.default.create({baseURL:c,headers:{"Content-Type":"application/json"}});r.interceptors.request.use(a=>{let t=localStorage.getItem("token");return t&&(a.headers.Authorization=`Bearer ${t}`),a});let n=async(a,t)=>{console.log("Login API called with:",{email:a,baseURL:c});try{let e=await r.post("/auth/login",{email:a,password:t});return console.log("Login successful:",e.data),e.data}catch(a){throw console.error("Login error:",a),a}},l=async a=>(await r.post("/auth/register",a)).data,p=async a=>(await r.get("/influencers/search",{params:a})).data,d=async a=>(await r.get(`/influencers/${a}`)).data,y=async()=>(await r.get("/profile/me")).data,w=async a=>(await r.put("/profile/me",a)).data,m=async a=>(await r.post("/profile/social-accounts",a)).data,g=async(a,t)=>(await r.put(`/profile/social-accounts/${a}`,t)).data,u=async a=>(await r.delete(`/profile/social-accounts/${a}`)).data,f=async a=>(await r.post("/profile/portfolio",a)).data,h=async(a,t)=>(await r.put(`/profile/portfolio/${a}`,t)).data,j=async a=>(await r.delete(`/profile/portfolio/${a}`)).data,v=async(a={})=>(await r.get("/projects/available",{params:a})).data,$=async a=>(await r.post("/projects/apply",a)).data,P=async()=>(await r.get("/projects/my-applications")).data,A=async()=>(await r.get("/applications/my-projects")).data,b=async a=>(await r.put(`/projects/applications/${a}/accept`)).data,R=async a=>(await r.delete(`/projects/applications/${a}/reject`)).data,M=async a=>(await r.post("/projects",a)).data,I=async()=>(await r.get("/projects")).data,T=async a=>(await r.get(`/projects/${a}`)).data,L=async a=>(await r.post("/teams",a)).data,S=async()=>(await r.get("/teams/my-team")).data,B=async(a,t)=>(await r.put(`/teams/${a}`,t)).data,N=async(a,t)=>(await r.post(`/teams/${a}/members`,t)).data,U=async(a,t)=>(await r.delete(`/teams/${a}/members/${t}`)).data,_=async(a,t,e)=>(await r.put(`/teams/${a}/members/${t}/role`,e)).data,k=async a=>(await r.delete(`/teams/${a}`)).data,x=async(a=1,t=20,e=!1)=>(await r.get("/notifications",{params:{page:a,limit:t,unreadOnly:e}})).data,C=async a=>(await r.put(`/notifications/${a}/read`)).data,D=async()=>(await r.put("/notifications/mark-all-read")).data,E=async a=>(await r.delete(`/notifications/${a}`)).data,q=async(a="month",t,e)=>{let o={period:a};return t&&(o.startDate=t),e&&(o.endDate=e),(await r.get("/analytics/overview",{params:o})).data},z=async(a="month")=>(await r.get("/analytics/performance")).data,F=async(a="month")=>(await r.get("/analytics/comparison")).data,O=async a=>(await r.post("/reviews",a)).data,W=async(a="received",t=1,e=20)=>(await r.get("/reviews/my-reviews",{params:{type:a,page:t,limit:e}})).data,X=async()=>(await r.get("/reviews/reviewable-projects")).data;o()}catch(a){o(a)}})}};